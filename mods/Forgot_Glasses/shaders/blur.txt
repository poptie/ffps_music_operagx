uniform shader iChunk;

//2D normalized hash function (returns a random unit vector)
half2 hash2_norm(half2 p)
{
    return normalize(fract(cos(p*float2x2(12.98,78.37,69.42,13.14))*3956.4)-0.5);
}

half4 main(float2 xy)
{
    //Radius multiplier
    const float RADIUS = 1;
    //Number of blur samples. More samplers = smoother but costlier
    const float SAMPLES = 64;
    //Bokeh gamma value. Higher = sharper brightness
    const half4 GAMMA = half4(3);
    
    //Initialize blur output color
    half4 color = half4(0);
    
    //Start with a random sample point
    float2 point = hash2_norm(xy)*RADIUS;
    //Golden angle rotation matrix (look up Fibonacci or Vogel disks)
    const float2x2 rot = float2x2(-0.737369, 0.675490, -0.675490, -0.737369);
    
    //Iterate through samples
    for(float i = 0; i<SAMPLES; i++)
    {
        //Rotate sample point
        point *= rot;
        //Add gamma-encoded sample and diminish edges
        color += pow(iChunk.eval(xy+point*sqrt(i)),GAMMA) * min((SAMPLES-i)/10,1);
    }
    //Average samples and decode gamma
    return pow(color/color.a, 1/GAMMA);
}