//Item size (in pixels)
const float SIZE = 128;
//Pi * 2
const float TAU = 6.28318530718;
//Number of item layers
const float LAYERS = 3;
//Movement speed
const float SPEED = 10;

//Scale random range and starting point
const float SCALE_RANGE = 0.6;
const float SCALE_MIN = 0.7;

//Fade transition starting and end points (0 to 1)
const float FADE_START = 0.3;
const float FADE_END = 0.5;

//Each item block is assigned a random number between 0 and 1
//Anything below the CPU level is empty
//CPU's are between the CPU and FROG level,
//Frogs between FROG and RAM and Ram between RAM and 1.
const float LEVEL_CPU  = 0.7;
const float LEVEL_FROG = 0.8;
const float LEVEL_RAM  = 0.9;

//Frog hat base color
const half3 COLOR_FROG_BASE  = half3(.1, .9, .2);
//Frog eye white color
const half3 COLOR_FROG_EYE   = half3( 1,  1,  1);
//Frog eye pupil color
const half3 COLOR_FROG_PUPIL = half3(.1, .1, .1);
//Frog mouth color
const half3 COLOR_FROG_MOUTH = half3(.1, .1, .1);

//RAM board color
const half3 COLOR_RAM_BASE   = half3(.2, .7, .4);
//RAM copper contact color
const half3 COLOR_RAM_COPPER = half3( 1, .8, .3);
//RAM cell color
const half3 COLOR_RAM_CELL   = half3(.2, .2, .2);

//CPU board color
const half3 COLOR_CPU_BASE   = half3(.2, .7, .4);
//CPU copper pin color
const half3 COLOR_CPU_COPPER = half3( 1, .8, .3);
//CPU cell color
const half3 COLOR_CPU_CELL   = half3(.8, .8, .8);

//General shadow color
const half3 COLOR_SHADOW     = half3( 0,  0,  0);


uniform shader iChunk;
uniform float2 iChunkSize;
uniform float2 iChunkOffset;
uniform float2 iContentSize;
uniform float iFrame;

//1D, float hash function
half hash1(half p)
{
	return fract(cos(p*12.98)*3956.4);
}
//2D, float hash function
half hash1(half2 p)
{
	return fract(cos(p.x*12.98+p.y*69.42)*3956.4);
}
//2D, vec2 hash function
half2 hash2(half2 p)
{
	return fract(cos(p*float2x2(12.98,69.42,78.37,13.14))*3956.4);
}
//1D, float value noise (cubic)
half value(float p)
{
	float f = floor(p);
	float s = p-f;
	s *= s*(3-s*2);
	
	return mix(hash1(f+0), hash1(f+1), s.x);
}
//2D, float value noise (bi-cubic)
half value(float2 p)
{
	float2 f = floor(p);
	float2 s = p-f;
	s *= s*(3-s*2);
	const float2 o = float2(0,1);
	return mix(mix(hash1(f+o.xx), hash1(f+o.yx), s.x), mix(hash1(f+o.xy), hash1(f+o.yy), s.x), s.y);
}
//Square worley noise
half worley(float2 p)
{
	float2 f = floor(p);
	half d = 9;
	
	for(int x = 0; x<=1; x++)
	for(int y = 0; y<=1; y++)
	{
		float2 v = float2(x,y)+f;
		float2 a = abs(hash2(v)*.5-.5+p-v);
		half t = hash1(v)>.5? (a.x+a.y)/1.4 : max(a.x,a.y);
		d = min(d,t);
	}
	return d;
}
//Smooth maximum (inspired by iq)
float smax(float a, float b, float s)
{
	return log(exp(a*s) + exp(b*s)) / s;
}
//2D rotation matrix
mat2 rotate2D(float a)
{
	return mat2(cos(a), -sin(a), sin(a), cos(a));
}
//Capsule SDF
half capsule(float2 p, float2 a, float2 b) 
{
	return length(p-a + clamp(dot(a-p,a-b) / dot(a-b,a-b), 0, 1) * (a-b));
}
//Box SDF
half box(float2 p, float2 s)
{
	vec2 d = abs(p)-s;
	return length(max(d,0))+min(0,max(d.x,d.y));
}

half4 main(float2 xy)
{
	//Sample base color
	half4 color = iChunk.eval(xy);
	//Store background color
	half4 back = color;
	
	//Screen uvs (-1 to +1)
	half2 uv = xy/iChunkSize*2-1;

	//Transformation matrix
	mat2 t = mat2(0.8, -0.6, 0.6, 0.8);
	
	//Loop through layers
	for(float i = 1; i<=LAYERS; i++)
	{
		//Parallax coordinates
		float2 parallax = (xy+iChunkOffset*(1+i*0.05)) * t + iFrame*SPEED;
		//Divide parallax coordinates into blocks
		float2 block = ceil(parallax / SIZE / 2) + i/.13;
		
		//Randomize scale
		float scale = hash1(block+.5)*SCALE_RANGE+SCALE_MIN;
		//Smoothly decrease scale towards the center
		scale = smax(scale*(uv*uv).x, 1, -9);
		//Block relative coordinates (scaled)
		float2 p = (mod(parallax, SIZE*2) - SIZE) / scale;
		//Rotate each block randomly
		p *= rotate2D(hash1(block) * TAU);
		//Mirror coordinates
		float2 m = float2(abs(p.x), p.y);
		//Anti-aliasing scale factor
		float AA = scale/2;
		
		float id = hash1(block-.7);
		if (scale>0.2 && id>LEVEL_CPU)
		{
			//Froggy hat
			if (id<LEVEL_FROG)
			{
				//Hat base and rim
				float hat = SIZE*0.4-length(max(abs(p)-SIZE*0.1,0));
				float rim = SIZE*0.8-length((p-SIZE*half2(0,0.4))*half2(1,2));
				float d = hat;
				d = smax(d, rim,.05);
				d = smax(d, SIZE*0.07-length((p+SIZE*half2(0,.5))*half2(1,2)),1);
				d = smax(d, SIZE*0.18-length(m+SIZE*half2(-.4,.45)),.5);
				
				//Hat creases
				float crease = SIZE*1 - length(p+half2(0,.7)*SIZE);
				crease = .1*SIZE + (crease<0.0? abs(mod(crease+SIZE*.04,SIZE*.06)-SIZE*.03) - crease*.2 : smax(abs(p.x)/.2 + SIZE*.07, crease, -.2));
				
				//Eye position coordinates
				vec2 pe = m+SIZE*half2(-.41,.46);
				float eye = smax(SIZE*0.15-length(pe), SIZE*.03-hat, -.5);
				float pupil = SIZE*(0.1+0.01*cos(atan(pe.y,pe.x)*12))-length(pe);
				
				//Mouth lip
				float mouth = smax(SIZE*0.01-abs(SIZE*0.45-length(p+SIZE*half2(0,.36))), p.y+SIZE*0.06, -0.5);
				//Mouth corner coordinates
				vec2 pm = m+SIZE*half2(-.33,.07);
				mouth = smax(mouth, SIZE * smax(cos(atan(pm.y,pm.x)*4+1)*.03, 0, 25) - length(pm), 1);
				
				//Soft shading around the edges
				half shade = 1 - 0.5/exp(crease/1e1);
				
				//Blend colors
				color.rgb += (shade*COLOR_FROG_BASE  - color.rgb) * clamp(d*AA+.5, 0, 1);
				color.rgb += (shade*COLOR_FROG_EYE   - color.rgb) * clamp(eye*AA+.5, 0, 1);
				color.rgb += (shade*COLOR_FROG_PUPIL - color.rgb) * clamp(pupil*AA+.5, 0, 1);
				color.rgb += (shade*COLOR_FROG_MOUTH - color.rgb) * clamp(mouth*AA+.5, 0, 1);
				
				//Add a basic soft shadow
				half shadow = 0.5 / exp(max(d/2e1, -d/1e1));
				color.rgb += (COLOR_SHADOW - color.rgb) * shadow;
			}
			//RAM
			else if (id<LEVEL_RAM)
			{
				//Ram base
				float ram = -box(p, SIZE*half2(.8,.2));
				float d = min(ram, capsule(m,SIZE*half2(.78,.06),SIZE*half2(1,.06))-SIZE*.03);
				d = min(d, capsule(m,SIZE*half2(.78,-.06),SIZE*half2(1,-.06))-SIZE*.03);
				d = min(d, length(m-SIZE*half2(.76,-.15))-SIZE*.02);
				d = min(d, capsule(p,-SIZE*half2(.2,.3),-SIZE*half2(.2,.14))-SIZE*.02);
				
				//Contacts
				float contact = min(d, -box(p+SIZE*half2(0,.16), SIZE*half2(.7,.04)));
				contact = min(contact, abs(mod(p.x,SIZE*.04)-SIZE*.02));
				//Contact glint (0 to 0.2)
				float glint = cos(value(xy.x/57+iFrame)*31)*.1+.1;
				
				//Cells
				float cell = -box(mod(m+SIZE*half2(.08,.02),SIZE*.16)-SIZE*.08,SIZE*half2(.06,.07));
				cell = min(cell, -box(m-SIZE*half2(.4,.06),SIZE*half2(.3,.08)));
				
				//Barcode sticker
				float bar = SIZE*0.03-box(p-SIZE*half2(.4,.06),SIZE*half2(.16,.03));
				half barcode = max((value(p.x/SIZE*80)-.5)*scale*3+.5,(p.y-SIZE*0.08)/2);
				
				//Circuitry patterns
				half circuit = worley(p/SIZE/.15);
				circuit = 1 + 0.2*cos(circuit*5*TAU)*scale;
				
				//Blend colors
				color.rgb += (COLOR_RAM_BASE * circuit - color.rgb) * clamp(d*AA+.5,0,1);
				color.rgb += (COLOR_RAM_COPPER + glint - color.rgb) * clamp(contact*AA+.5,0,1);
				color.rgb += (COLOR_RAM_CELL           - color.rgb) * clamp(cell*AA+.5,0,1);
				color.rgb += (barcode                  - color.rgb) * clamp(bar*AA+.5,0,1);
				
				//Add a basic soft shadow
				half shadow = 0.5 / exp(max(d/5e0, -d/1e1));
				color.rgb += (COLOR_SHADOW - color.rgb) * shadow;
			}
			//CPU
			else
			{
				//CPU base
				float cpu = -box(p, SIZE*half2(0.5));
				float d = cpu;
				float h = sqrt(0.5);
				mat2 R = mat2(h, -h, h, h);
				
				//Pins
				float pin = SIZE*0.018 - length(mod(p*R+SIZE*0.02,SIZE*0.04) - SIZE*0.02);
				//Rounded pin coordinates
				float2 b = R*floor(p*R/SIZE/0.04+0.5);
				float2 a = abs(b);
				//Limit pins where they're supposed to be
				pin = dot(b,half2(.5))<10 && max(a.x,a.y)<11 && max(a.x,a.y)>5? pin : -1e2;
				//Remove center square
				pin = max(pin, min(-box(p-SIZE*.43, SIZE*half2(0.025)), dot(p-SIZE*.43,half2(h))));
				
				//Add central cells
				float cell = -max(box(p,SIZE*half2(.16)),box(mod(p,SIZE*0.08)-SIZE*0.04,m.x/SIZE<.1? SIZE*half2(0.03,0.02) : SIZE*half2(0.02,0.03)));
			
				//Metal glints (0 to 0.2)
				half glint = cos(value(xy.x/67)*31)*.1+.1;
				
				//Blend colors
				color.rgb += (COLOR_CPU_BASE           - color.rgb) * clamp(cpu*AA+.5,0,1);
				color.rgb += (COLOR_CPU_COPPER + glint - color.rgb) * clamp(pin*AA+.5,0,1);
				color.rgb += (COLOR_CPU_CELL   + glint - color.rgb) * clamp(cell*AA+.5,0,1);
				color.rgb -= color.rgb / exp(abs(cell)/4)*.4;
				
				//Add a basic soft shadow
				half shadow = 0.5 / exp(max(d/5e0, -d/1e1));
				color.rgb += (COLOR_SHADOW - color.rgb) * shadow;
			}
		}
		t *= -mat2(0.6, -0.8, 0.8, 0.6);
	}
	
	//Fade out at the edges
	float gradient = smoothstep(FADE_START, FADE_END, uv.x*uv.x);
	return mix(back, color, gradient);
}