//RGB tint color
const half3 COLOR = half3(.2,.4,.6);

//Dot spacing in pixels
const float DOTS_SPACING = 20;
//Parallax amount (higher values appear closer)
const half DOTS_PARALLAX = 1.1;

//Square size in pixels
const float SQUARE_SIZE = 30;
//Square speed
const float SQUARE_SPEED = 5;
//Square threshold amount (0 = none, 1 = opaque)
const float SQUARE_THRESHOLD = 0.01;
//Square alpha (0 = invisible, 1 = opaque)
const half SQUARE_ALPHA = 0.2;

//Radial dial ring count
const float RADIAL_RINGS = 8;
//Radial digit cycle speed
const half RADIAL_DIGIT_SPEED = 0.2;

//Linear dial cycle speed
const float LINEAR_SPEED = 0.3;

//Vignette intensity (opacity)
const float VIGNETTE_INTENSITY = 0.3;

//Radar scan speed
const half RADAR_SPEED = 0.2;
//Radar position in "SIZE" units
const half2 RADAR_POS = half2(.2,-2);
//Radar width/height in "SIZE" units
const half2 RADAR_SCALE = half2(.8,3);

//Pi and pi * 2
const float PI = 3.141592653589;
const float TAU = 6.28318530718;
	
//Character dimensions
float2 CHAR = float2(12,16);

uniform shader iChunk;
uniform float2 iChunkSize;
uniform float2 iChunkOffset;
uniform float4 iDate;
uniform float iFrame;

//1D, float hash function
half hash1(float p)
{
	return fract(cos(p*12.98)*3956.4);
}
//2D, float hash function
half hash1(float2 p)
{
	return fract(cos(p.x*12.98+p.y*69.42)*3956.4);
}
//2D, vec2 hash function
half2 hash2(float2 p)
{
	return fract(cos(p*float2x2(12.98,78.37,69.42,13.14))*3956.4);
}
//1D Value noise (cubic)
half value(float p)
{
	float f = floor(p);
	float s = p-f;
	s *= s*(3-s*2);
	
	return mix(hash1(f+0), hash1(f+1), s.x);
}
//2D Value noise (bi-cubic)
half value(float2 p)
{
	float2 f = floor(p);
	float2 s = p-f;
	s *= s*(3-s*2);
	const float2 o = float2(0,1);
	return mix(mix(hash1(f+o.xx),hash1(f+o.yx),s.x),mix(hash1(f+o.xy),hash1(f+o.yy),s.x),s.y);
}
//2D rotation matrix
mat2 rotate2D(float a)
{
	return mat2(cos(a), -sin(a), sin(a), cos(a));
}
//Capsule SDF
half capsule(float2 p, float2 a, float2 b)
{
	return length(p-a + clamp(dot(a-p,a-b) / dot(a-b,a-b), 0, 1) * (a-b));
}
//Box SDF (exterior-only)
half box(float2 p, float2 a, float2 b)
{
	return length(p-clamp(p,a,b));
}
//Rotated box SDF
half box_rot(float2 p, float2 a, float2 b, float r)
{
	p *= rotate2D(r);
	return length(p-clamp(p,a,b));
}

//Digit function
half digits(float2 xy, float value, float count, float thick)
{
	//Relative character pixel
	float2 p = mod(xy, CHAR);
	
	//Character 0
	half c0 = thick+1-abs(box(p,CHAR*half2(.5,.35),CHAR*half2(.5,.65))-CHAR.x*0.3);
	
	//Character 1
	half c1 = 1-box(p,CHAR*half2(.5,.15)-thick,CHAR*half2(.5,.85)+thick);
	c1 = max(c1,1-box(p,CHAR*half2(.3,.85)-thick,CHAR*half2(.7,.85)+thick));
	c1 = max(c1,1-box_rot(p-CHAR*half2(.5,.15),CHAR*half2(-.2,0)-thick,CHAR*half2(0,0)+thick,radians(45)));
	
	//Character 2
	half c2 = 1-box(p,CHAR*half2(.3,.85)-thick,CHAR*half2(.75,.85)+thick);
	c2 = (p.y>CHAR.y*.35) && (p.y-p.x>-CHAR.x*.5+CHAR.y*.35)? c2 : thick+1-abs(length(p-CHAR*half2(0.5,0.35))-CHAR.x*0.28+thick/2);
	c2 = max(c2,thick+1-capsule(p,CHAR*half2(.3,.85)-half2(thick,0),CHAR*half2(.5,.3)+(CHAR.x*0.35-thick)*.7));
	
	//Character 3
	half c3 = thick+1-abs(length(p-CHAR*half2(0.5,0.27))-CHAR.x*0.25+thick/2);
	c3 = max(c3,thick+1-abs(length(p-CHAR*half2(0.5,0.66))-CHAR.x*0.32+thick/2));
	c3 = min(c3,box(p,CHAR*half2(0,.3),CHAR*half2(.5,.66)));
	c3 = max(c3,1-box(p,CHAR*half2(0.5,0.44)-thick,CHAR*half2(0.6,0.44)+thick));
	
	//Character 4
	half c4 = 1-box(p,CHAR*half2(.7,.15)-thick,CHAR*half2(.7,.85)+thick);
	c4 = max(c4,1-box(p,CHAR*half2(.3,.6)-thick,CHAR*half2(.8,.6)+thick));
	c4 = max(c4,thick+1-capsule(p,CHAR*half2(.3,.6)-half2(thick,0),CHAR*half2(.7,.15)-half2(0,thick)));
	
	//Character 5
	half c5 = thick+1-abs(length(p-CHAR*half2(0.5,0.6))-CHAR.x*0.4+thick/2);
	c5 = min(c5,box(p,CHAR*half2(0.0,0.46),CHAR*half2(0.5,0.78)));
	c5 = max(c5,thick+1-capsule(p,CHAR*half2(.5-.28,.6-.18),CHAR*half2(.5-.28,.15)));
	c5 = max(c5,thick+1-capsule(p,CHAR*half2(.5-.28,.15),CHAR*half2(.5+.28,.15)));
	
	//Character 6
	half c6 = thick+1-abs(length(p-CHAR*half2(0.5,0.6))-CHAR.x*0.36+thick/2);
	c6 = max(c6,thick+1-capsule(p,CHAR*half2(.5-.31,.6-.08),CHAR*half2(.5,.12)));
	
	//Character 7
	half c7 = thick+1-capsule(p,CHAR*half2(.7,.15)+half2(thick,0),CHAR*half2(.3,.85));
	c7 = max(c7,1-box(p,CHAR*half2(.2,.15)-thick,CHAR*half2(.7,.15)+thick));
	
	//Character 8
	half c8 = thick+1-abs(length(p-CHAR*half2(0.5,0.27))-CHAR.x*0.23+thick/2);
	c8 = max(c8,thick+1-abs(length(p-CHAR*half2(0.5,.66))-CHAR.x*0.31+thick/2));
	
	//Character 9
	half c9 = thick+1-abs(length(p-CHAR*half2(0.5,0.35))-CHAR.x*0.34+thick/2);
	c9 = max(c9,thick+1-capsule(p,CHAR*half2(.5+.29,.35+.1),CHAR*half2(.5,.83)));
	
	//Character place
	float e = floor(xy/CHAR).x;
	
	//Digit value depending on row
	half v = fract(value*pow(10,e-count));
	
	//Pick character from value
	half c = v<.1?c0 : v<.2? c1 : v<.3? c2 : v<.4? c3: v<.5? c4 : v<.6? c5: v<.7? c6: v<.8? c7: v<.9 ? c8: c9;
	
	//Output character alpha
	return clamp(c,0,1) * half(e<count && e>=0);
}
half4 main(float2 xy)
{
	//UI Scale
	float SIZE = floor(sqrt(iChunkSize.y)*4)+0.5;
	//Character (digit scale)
	float CHAR_SCALE = SIZE/76;
	
	//Sample base color
	half4 color = iChunk.eval(xy);
	
	//Screen coordinates -1 to 1 (then aspect ratio corrected)
	half2 screen = (xy/iChunkSize*2-1) * sqrt(iChunkSize.xy/iChunkSize.yx);
	//Signed distance to screen edges (-1 to +1)
	half2 edge = xy/iChunkSize*2-1;
	//Raised to the fourth power
	edge *= edge; edge *= edge;
	
	//Rectangle gradient
	half grad = max(edge.x, edge.y);
	
	//Dots pattern
	half dots = clamp(1-length(mod(xy + iChunkOffset * DOTS_PARALLAX, DOTS_SPACING*2)-DOTS_SPACING)*0.5,0,1);
	
	//Glow around the edges
	float glow = max(edge.x - edge.y, 0);
	
	//Square column depth for parallax
	half square_depth = 1+hash1(floor(xy.x/SQUARE_SIZE))*0.4;
	//Square cell coordinates with parallax
	vec2 square_cell = floor((xy+float2(0,iChunkOffset.y+iFrame*SQUARE_SPEED)*square_depth)/SQUARE_SIZE);
	//Add random squares
	glow += step(hash1(square_cell), SQUARE_THRESHOLD) * SQUARE_ALPHA;
	
	//Position relative to right-center
	float2 p = xy - iChunkSize * half2(1, 0.5);
	//Signed cell coordinates
	float2 c = mod(p,SIZE) - SIZE/2;
	//Ring width (in pixels)
	float S = SIZE/RADIAL_RINGS/2;
	//Ring position (in width units)
	float l = length(c)/S;
	//Ring number (starting at 1)
	float r = ceil(l);
	//Stripes number per ring
	float s = ceil(hash1(r-(c-p).y)*4);
	//Round angle using stripe number
	float a = ceil(atan(c.y,c.x)*r*s/TAU+cos(r+iFrame));
	
	//Dial angle in radians (plus sine wave shifting)
	float rad = atan(c.y,c.x)+cos(r+(c-p).y+iFrame)/r;
	//Angle repeat count for each big tick mark
	float rep = TAU/r/s;
	//Compute the distance to the big tick lines
	float2 tick1 = float2((mod(rad - rep/2, rep) - rep/2) * length(c)*PI/2, l*S);
	
	//4x the small ticks
	rep /= 4;
	//Compute the distance to the small tick lines
	float2 tick2 = float2((mod(rad - rep/2, rep) - rep/2) * length(c)*PI/2, l*S);
	
	//Character place (column, row)
	float2 char = floor(c/CHAR/CHAR_SCALE+.5);
	
	//Outer ring starts with protractor tick marks
	half dials = 0;
	
	//Render radial dials
	if (p==clamp(p,half2(-1,-3)*SIZE,half2(0,0)*SIZE))
	{
		dials = (r==RADIAL_RINGS
		?
			//Combine small ticks and big ticks
			max(max(2 - capsule(tick1, float2(0,r*S-S*.8+2), float2(0,r*S-2))*.7, 
		        	1.5-capsule(tick2, float2(0,r*S-.2*S-2), float2(0,r*S+2))*.7), 0)
		:
		//Inner rings are polar coordinate noise
		r>3 ?
			//Pick a random value between 0 and 1
			clamp(hash1(float2(mod(a,s*r),r)+c-p)*3-1,0,1)
			//Smoothly blend between rings
			* min(abs((fract(l+0.5)-0.5)*S),1)
		//Insert digits in the center
		:
			//Display a random number
			digits(c/CHAR_SCALE-CHAR*half2(-.5,.5), value(char+(p-c)*9+iFrame*RADIAL_DIGIT_SPEED)/.1,1,.5)
			//Only display one row
			* half(floor(char+.5).y==0)
		)
		//Limit to inside rings
		*half(r<=RADIAL_RINGS);
	}
	//Render linear dials
	else if (p==clamp(p,half2(-1,0)*SIZE,half2(0,2)*SIZE))
	{
		//Add linear dials
		dials += (clamp((c.y - (value((c-p).y+iFrame*LINEAR_SPEED)-0.5)*SIZE)*0.5, .4, 1) *
		//Limit to two stripes
		half(abs(c.x)<SIZE*0.2 && abs(c.x)>SIZE*0.05 && abs(c.y)<SIZE*0.4) +
		//Linear tick marks
		max(1.5-capsule(mod(c-SIZE*half2(0,.1),SIZE*half2(.5,.2))-SIZE*half2(.25,.1),SIZE*half2(-.02,0),SIZE*half2(.02,0))/2,0));
	}
	
	//Position relative to left-center
	p = xy-iChunkSize*half2(0,0.5);
	//Recompute signed cell coordinates
	c = mod(p,SIZE)-SIZE/2;
	
	//Radar back box
	half b = box(p-RADAR_POS*SIZE, half2(0), RADAR_SCALE*SIZE);
	//Coordinates for grid pattern
	float2 grid = abs(mod(p+SIZE/10,SIZE/5)-SIZE/10);
	//Radar box and grid
	half radar = 1/(1+b*.8+grid.x)+1/(1+b*.8+grid.y);
	//Time variable for each cell
	float t = floor(((p-c)/SIZE-iFrame).y/5 +0.33);
	//Randomize point in each cell
	float2 point = (hash2(p-c+t)-0.5)*(SIZE-16);
	
	//Radar scan pass
	half scan = fract((point+p-c).y/SIZE/5-iFrame*RADAR_SPEED+0.5);
	//Smooth triangle wave
	scan = max(scan*min(25-scan*25,1)*1.5-0.5, 0);
	//Radar scan wave
	float wave = 0.005/(0.01+abs(fract(p.y/SIZE/5-iFrame*RADAR_SPEED)-0.5));
	//Circle ping masks
	half ping = (clamp(scan*8-length(point-c), 0, 1)*scan+wave) * max(1-b,0);
	
	//Vignette gradient
	half vig = exp((length(edge)-1)*4) * VIGNETTE_INTENSITY;
	//Blend in dots and glow particles
	color.rgb += (COLOR*COLOR - color.rgb*color.rgb*0.6)*(dots+glow)*grad;
	//Blend vignette and radar
	color.rgb += (COLOR - color.rgb*color.rgb*0.6)*(vig+radar);
	
	//Offset digits to just under the radar
	p -= SIZE*(RADAR_POS + half2(0,RADAR_SCALE.y+0.8));
	float row = floor(p/CHAR/CHAR_SCALE).y+3;
	
	//Approximate number of days of since 0 AD
	float day = floor(iDate.x*365.25+iDate.y*12+iDate.z)+0.5;
	//Day and seconds
	float value = row<1? day : iDate.w+0.5;
	//Third row is randomized each day
	if (row>=3)
	{
		value = hash1(floor(float2(day,(p/CHAR/CHAR_SCALE).x)));
	}
	//Only display row 0,1 and 3
	half clip = half(row>=0 && row<4  && row != 2);
	
	//Combine dials and digits for white highlighting
	float white = dials + clip * digits(p/CHAR_SCALE, value, 5, 1);
	//Blend dials, digits and radar pings
	color.rgb += (mix(COLOR, half3(1), white) - color.rgb) * white * grad + ping * grad;
	return color;
}