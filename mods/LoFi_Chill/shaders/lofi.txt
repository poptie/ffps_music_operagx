uniform shader iChunk;
uniform float2 iChunkSize;
uniform float2 iChunkOffset;
uniform float2 iContentSize;
uniform float iFrame;

//scalar hash function
half hash1(float2 p)
{
	return fract(cos(p.x*12.98 + p.y*69.42)*3956.4);
}
//vec2 hash function
half2 hash2(float2 p)
{
	return fract(cos(p * float2x2(12.98,78.37,69.42,13.14))*3956.4);
}
//vec3 hash function
half3 hash3(float2 p)
{
	return fract(cos(p.x*float3(12.98,78.37,69.42) + p.y*float3(59.67,14.59,11.26))*3956.4);
}
//Value noise (bi-cubic)
half value(float2 p)
{
	float2 f = floor(p);
	float2 s = p-f;
	s *= s*(3-s*2);
	const float2 o = float2(0,1);
	return mix(mix(hash1(f+o.xx),hash1(f+o.yx),s.x),mix(hash1(f+o.xy),hash1(f+o.yy),s.x),s.y);
}
//Bokeh particles (color and alpha)
half4 bokeh(float2 p, float2 scroll, float time)
{
	//Pi times 2
	const float TAU = 6.28318530718;
	float SCALE = 0.5*iChunkSize.y;
	
	half h = 0;
	float a = 0;
	half4 col = half4(0);
	float2 q = p/SCALE;
	float2x2 t = float2x2(1);
	
	//5 layers of bokeh
	for(float i = 0; i<5; i++)
	{
		float2 s = scroll/SCALE*(1.5-0.1*i) + float2(0,time*(8+i)*0.005);
		t *= float2x2(-0.8,0.6,0.6,0.8)*1.4;
		float2 cell = ceil((q+s)*t/2);
		float2 pos = (q+s)*t+.1*cos(cell.yx+i*float2(7,1)+time*0.2);
		float2 part = mod(pos,2)-1;//+cos(cell.yx/.3-i)*.2;
		
		//Random parameters
		half3 rand = hash3(cell/100);
		//Bokeh alpha
		float alpha = exp((rand.x-length(part)*3)*8);
		//Softer version
		//max(1-length(part)*3/rand.x,0);
		half3 hue = cos(rand.y*time + (rand.z+half3(0,.333,.667))*TAU);
		hue = hue * half3(.4,.2,.2) + half3(1,.5,.5);
		
		col += (half4(hue,1) - col * 0.5) * min(alpha, 1);
	}
	return col;
}
half4 main(float2 xy)
{
	//Particle parameters
	const half BOKEH_ALPHA = 0.3;
	//Bokeh movement speed
	const half BOKEH_SPEED = 1;
	//Where the bokeh gradient starts and ends (between 0 and 1)
	const half BOKEH_START = 0.1;
	const half BOKEH_END = 0.6;
	
	//Shading gradient alpha
	const half GRADIENT = 0.2;
	
	//Color grading tint (RGBA, higher = darker)
	const half4 TINT = half4(0.6, 1, 0.9, 1);
	
	//Chromatic abberation offset (0 = no aberrations)
	const half CHROMATIC_ABERRATION = 0.001;
	
	//Add scroll offset
	float2 p = xy+iChunkOffset;
	half2 screen = p/iChunkSize*2-1;
	
	//Sample base texture
	half4 color = iChunk.eval(xy);
	//Chromatic aberration
	color.r = iChunk.eval(mix(xy,iChunkSize/2, +CHROMATIC_ABERRATION)).r;
	color.b = iChunk.eval(mix(xy,iChunkSize/2, -CHROMATIC_ABERRATION)).b;
	
	//Color tints change with weather
	half4 tint = half4(1);
	
	//Compute particle alpha
	half4 part = bokeh(xy, iChunkOffset, iFrame * BOKEH_SPEED);
	
	//Blend with base color
	half alpha = smoothstep(BOKEH_END, BOKEH_START, 1-(screen*screen).x);
	//Shading gradient
	color.rgb *= 1 - smoothstep(0.0, 0.6, abs(screen.x)) * GRADIENT;
	color.rgb += part.rgb * part.a * alpha * BOKEH_ALPHA;
	
	//Apply color tinting
	return pow(color, 1+(TINT-1)*alpha);
}