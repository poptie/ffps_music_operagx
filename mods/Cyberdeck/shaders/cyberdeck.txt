uniform shader iChunk;
uniform float2 iChunkSize;
uniform float2 iChunkOffset;
uniform float2 iContentSize;
uniform float iFrame;

//1D hash function
half hash1(half p)
{
	return fract(cos(p*12.98)*3956.4);
}
//1D hash function
half hash1(half2 p)
{
	return fract(cos(p.x*12.98+p.y*69.42)*3956.4);
}
//2D hash function
half2 hash2(half2 p)
{
	return fract(cos(p*float2x2(12.98,78.37,69.42,13.14))*3956.4);
}

half4 main(float2 xy)
{
	//Disortion block scale
	const float SCALE = 200;
	//Shift vector (in pixels) for each color channel
	const float2 SHIFT_R = float2(5,2.5);
	const float2 SHIFT_G = float2(10,5);
	const float2 SHIFT_B = float2(7,3.5);
	//Mosh effect amount (in pixels)
	const float MOSH = 100;
	
	const half GLITCH_RATE = 15;
	
	//Number of pulse waves across the screen
	const half PULSE_WAVES = 1;
	//Rate of pulses
	const half PULSE_RATE = 1;
	
	//Binary matrix font scale
	const half MATRIX_SCALE = 0.5;
	//Max line length (in number of characters)
	const float MAX_LENGTH = 64;
	//Matrix scroll rate
	const float MATRIX_SCROLL = 800;
	//Matrix color
	const half4 MATRIX_COLOR = half4(1,.1,.2,0.7);
	
	//Matrix gradient width and intensity
	const float GRADIENT_WIDTH = 400;
	const half GRADIENT_INTENSITY = 0.2;
	
	//Generate randomize blocks
	half2 block0 = hash2(ceil(xy/SCALE)+ceil(iFrame*GLITCH_RATE));
	half2 block1 = hash2(ceil(xy/SCALE/max(block0,0.01))+ceil(iFrame*GLITCH_RATE/2));
	half2 block2 = hash2(ceil(xy/SCALE/block1.yx)+ceil(iFrame*GLITCH_RATE/4)) - 0.5;
	
	//Scrolled coordinates
	vec2 scroll = xy+iChunkOffset; 
	
	//Compute glitch intensity waves
	float intensity = sin(floor((scroll/iChunkSize*PULSE_WAVES).y-iFrame*PULSE_RATE));
	intensity *= sin(floor((scroll/iChunkSize*PULSE_WAVES*.3).y-iFrame*PULSE_RATE*.6));
	intensity *= sin(floor((scroll/iChunkSize*PULSE_WAVES*.6).y-iFrame*PULSE_RATE*.9));
	intensity *= sin(floor((scroll/iChunkSize*PULSE_WAVES/.6).y-iFrame*PULSE_RATE/.9));
	intensity *= sin(floor((scroll/iChunkSize*PULSE_WAVES/.3).y-iFrame*PULSE_RATE/.6));
	intensity *= intensity;
	
	//Distance to center for square gradient
	half2 square = abs(xy/iChunkSize*2 - 1);
	square *= square;
	square *= square;
	//Pick a randomized threshold for each block of pixels
	float threshold = abs(dot(block0,block2));
	//Apply the block intensity
	intensity *= smoothstep(0.0, threshold, max(square.x,square.y)*0.05)*5;
	
	//half4 base = iChunk.eval(xy);
	//Sample 3 times for random RGB shifting
	half4 color_r = iChunk.eval(xy+intensity*(block1-.5)*SHIFT_R);
	half4 color_g = iChunk.eval(xy+intensity*(block1-.5)*SHIFT_G);
	half4 color_b = iChunk.eval(xy+intensity*(block1-.5)*SHIFT_B);
	//Blend colors together
	half4 color = half4(color_r.r,color_g.g,color_b.b,color_r.a);
	
	//Sample for datamoshing
	half4 color_mosh = iChunk.eval(xy+intensity*block2*step(block1,block1.yx)*MOSH);
	
	//Character scroll position
	float2 char_p = (scroll - float2(0,iFrame*MATRIX_SCROLL)) / MATRIX_SCALE;
	//Size of character bounding boxes
	float2 char_size = float2(14,18);
	//Sub cell character coordinates
	float2 char = mod(char_p, char_size);
	//Character cell coordinates
	float2 char_cell = char_p - char;
	//Random character value
	half char_rand = hash1(char_cell);
	//Compute the binary character mask
	bool char_mask = char_rand > 0.5? length(char - clamp(char, float2(6,3), float2(6,char_size.y-3)))<2 : //1
								      abs(length(char - clamp(char, float2(5), char_size-5))-2)<2;         //0
								      //hash1(mod(ceil(char_p/2),99))>.5;                                  //Random symbol experiment
	float width = iChunkSize.x*0.5/MATRIX_SCALE;
	float edge = width - abs(char_cell - width).x;
	//Get a random line length (weighted toward 0)
	float line_length = pow(hash1(char_cell.y+sign(char_cell.x-width)/3),5)*char_size.x*MAX_LENGTH;
	//Generate alpha from masks
	half char_alpha = half(char_mask && edge<line_length);
	//Add gradient alpha
	char_alpha = max(char_alpha,(1-edge/GRADIENT_WIDTH) * GRADIENT_INTENSITY) * min(sqrt(intensity)*2,1);
	
	//Blend with matrix color
	return color+(MATRIX_COLOR-color*0.8)*char_alpha;
}