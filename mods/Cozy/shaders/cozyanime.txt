uniform shader iChunk;
uniform float2 iChunkSize;
uniform float2 iChunkOffset;
uniform float2 iContentSize;
uniform float iFrame;

//1D hash function
half hash1(half p)
{
	return fract(cos(p*12.98)*3956.4);
}
//1D hash function
half hash1(half2 p)
{
	return fract(cos(p.x*12.98+p.y*69.42)*3956.4);
}
//2D hash function
half2 hash2(half2 p)
{
	return fract(cos(p*float2x2(12.98,78.37,69.42,13.14))*3956.4);
}
//Value noise (bi-cubic)
half value(float2 p)
{
	float2 f = floor(p);
	float2 s = p-f;
	s *= s*(3-s*2);
	const float2 o = float2(0,1);
	return mix(mix(hash1(f+o.xx), hash1(f+o.yx), s.x), mix(hash1(f+o.xy), hash1(f+o.yy), s.x), s.y);
}
half4 main(float2 xy)
{
	//Light color and alpha (intensity)
	const half4 COLOR = half4(1, 0.7, 0.3, 0.5);
	
	//Light ray scale
	const half SCALE = 0.125;
	
	//Speed range
	const half2 SPEEDS = half2(0.1,-0.1);
	
	//Light gradient start and end points (between 0 and 1)
	const half LIGHT_START = 0;
	const half LIGHT_END = 0.6;
	
	//Parallax amount (1 = default, higher appears closer)
	const half PARALLAX = 1.2;
	
	//Color grading tint (RGBA, lower = brighter)
	const half4 TINT = half4(0.6, 0.9, 1.2, 1);
	
	//Sample base color
	half4 color = iChunk.eval(xy);
	
	//Get scroll coordinates with parallax
	float2 scroll = xy + iChunkOffset * PARALLAX;
	//Compute screen uv coordinates (-1 to +1)
	half2 uv = xy/iChunkSize*2-1;
	
	//Sample noise for light rays
	half rays = value((uv.yy+sign(uv.x)+abs(uv.x))/SCALE + iFrame*SPEEDS);
	//Apply gradient
	rays *= smoothstep(LIGHT_END, LIGHT_START, 1 - (uv*uv).x);
	//Square for better gamma
	rays *= rays;
	//Distance to cent for color grading
	half edge = abs(uv.x);
	
	//Add light rays
	color.rgb += (COLOR - color * 0.5).rgb * color.a * rays;
	
	//Apply color grading
	return pow(color, 1 + (TINT - 1) * edge);
}